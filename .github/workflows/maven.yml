# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "feature/cbot59-cicd" ]
  pull_request:
    branches: [ "feature/cbot59-cicd" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Check Maven Version
      run: mvn --version

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Build and push
      run: mvn clean install jib:build -Djib.from-platforms="linux/amd64,linux/arm64" -Djib.to.image=cbot59/customer -Djib.to.tags=${{ github.run_number }},latest -Djib.to.auth.username=${{ secrets.DOCKERHUB_USERNAME }} -Djib.to.auth.password=${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push to Cloud Raya
      run: |
        docker login registry.cloudraya.com --username=${{ secrets.CLOUDRAYA_USERNAME }} --password=${{ secrets.CLOUDRAYA_PASSWORD }}
        mvn clean install jib:build -Djib.from-platforms="linux/amd64,linux/arm64" -Djib.to.image=registry.cloudraya.com/${{ secrets.CLOUDRAYA_USERNAME }}/customer-app -Djib.to.tags=${{ github.run_number }},latest -Djib.to.auth.username=${{ secrets.CLOUDRAYA_USERNAME }} -Djib.to.auth.password=${{ secrets.CLOUDRAYA_PASSWORD }}
      #        docker build -t registry.cloudraya.com/${{ secrets.CLOUDRAYA_USERNAME }}/customer-app:${{ github.run_number }} .
      #        docker push registry.cloudraya.com/${{ secrets.CLOUDRAYA_USERNAME }}/customer-app:${{ github.run_number }}

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive

  deploy-to-k8s:
    needs: build
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        env:
          REGISTRY: registry.cloudraya.com/${{ secrets.CLOUDRAYA_USERNAME }}
          TAG: ${{ github.run_number }}
          NAMESPACE: ${{ vars.K8S_NAMESPACE || 'default' }}
          USE_PERSISTENT: ${{ vars.K8S_USE_PERSISTENT || 'false' }}
          USE_INGRESS: ${{ vars.K8S_USE_INGRESS || 'false' }}
          DOMAIN: ${{ vars.K8S_DOMAIN || '' }}
        run: |
          chmod +x deploy-to-k8s.sh

          # Skip build since we already built and pushed the image in the build job
          DEPLOY_ARGS="--registry $REGISTRY --tag $TAG --namespace $NAMESPACE --skip-build"

          # Add optional arguments based on environment variables
          if [ "$USE_PERSISTENT" = "true" ]; then
            DEPLOY_ARGS="$DEPLOY_ARGS --persistent"
          fi

          if [ "$USE_INGRESS" = "true" ]; then
            DEPLOY_ARGS="$DEPLOY_ARGS --ingress --domain $DOMAIN"
          fi

          # Run the deployment script
          ./deploy-to-k8s.sh $DEPLOY_ARGS

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ vars.K8S_NAMESPACE || 'default' }} -l app=customer-app
          kubectl get svc -n ${{ vars.K8S_NAMESPACE || 'default' }} -l app=customer-app
          if [ "${{ vars.K8S_USE_INGRESS || 'false' }}" = "true" ]; then
            kubectl get ingress -n ${{ vars.K8S_NAMESPACE || 'default' }}
          fi
